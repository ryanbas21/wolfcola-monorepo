"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runMain = void 0;
var Cause = _interopRequireWildcard(require("effect/Cause"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var FiberRef = _interopRequireWildcard(require("effect/FiberRef"));
var HashSet = _interopRequireWildcard(require("effect/HashSet"));
var Logger = _interopRequireWildcard(require("effect/Logger"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/** @internal */
const useStructuredLogger = /*#__PURE__*/Effect.locallyWith(FiberRef.currentLoggers, loggers => {
  if (HashSet.has(loggers, Logger.defaultLogger)) {
    const set = HashSet.remove(loggers, Logger.defaultLogger);
    return HashSet.add(set, Logger.withConsoleLog(Logger.structuredLogger));
  }
  return loggers;
});
/** @internal */
const runMain = (effect, options) => {
  const _effect = useStructuredLogger(effect);
  const fiber = Effect.runFork(options?.disableErrorReporting === true ? _effect : Effect.tapErrorCause(_effect, cause => {
    if (Cause.isInterruptedOnly(cause)) {
      return Effect.void;
    }
    return Effect.logError(cause);
  }));
  addEventListener("beforeunload", () => {
    fiber.unsafeInterruptAsFork(fiber.id());
  });
};
exports.runMain = runMain;
//# sourceMappingURL=runtime.js.map