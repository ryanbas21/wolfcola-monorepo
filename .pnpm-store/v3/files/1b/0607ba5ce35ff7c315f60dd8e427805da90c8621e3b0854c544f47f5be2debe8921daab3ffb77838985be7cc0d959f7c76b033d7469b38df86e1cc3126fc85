"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scopedLive = exports.scoped = exports.live = exports.flakyTest = exports.effect = exports.addEqualityTesters = void 0;
var Cause = _interopRequireWildcard(require("effect/Cause"));
var Duration = _interopRequireWildcard(require("effect/Duration"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Equal = _interopRequireWildcard(require("effect/Equal"));
var Exit = _interopRequireWildcard(require("effect/Exit"));
var _Function = require("effect/Function");
var Layer = _interopRequireWildcard(require("effect/Layer"));
var Logger = _interopRequireWildcard(require("effect/Logger"));
var Schedule = _interopRequireWildcard(require("effect/Schedule"));
var TestEnvironment = _interopRequireWildcard(require("effect/TestContext"));
var Utils = _interopRequireWildcard(require("effect/Utils"));
var V = _interopRequireWildcard(require("vitest"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/** @internal */
const runTest = effect => Effect.gen(function* () {
  const exit = yield* Effect.exit(effect);
  if (Exit.isSuccess(exit)) {
    return () => {};
  } else {
    const errors = Cause.prettyErrors(exit.cause);
    for (let i = 1; i < errors.length; i++) {
      yield* Effect.logError(errors[i]);
    }
    return () => {
      throw errors[0];
    };
  }
}).pipe(Effect.runPromise).then(f => f());
/** @internal */
const TestEnv = /*#__PURE__*/TestEnvironment.TestContext.pipe( /*#__PURE__*/Layer.provide( /*#__PURE__*/Logger.remove(Logger.defaultLogger)));
/** @internal */
function customTester(a, b, customTesters) {
  if (!Equal.isEqual(a) || !Equal.isEqual(b)) {
    return undefined;
  }
  return Utils.structuralRegion(() => Equal.equals(a, b), (x, y) => this.equals(x, y, customTesters.filter(t => t !== customTester)));
}
/** @internal */
const addEqualityTesters = () => {
  V.expect.addEqualityTesters([customTester]);
};
/** @internal */
exports.addEqualityTesters = addEqualityTesters;
const makeTester = mapEffect => {
  const run = self => (...args) => (0, _Function.pipe)(Effect.suspend(() => self(...args)), mapEffect, runTest);
  const f = (name, self, timeout) => V.it(name, run(self), timeout);
  const skip = (name, self, timeout) => V.it.skip(name, run(self), timeout);
  const skipIf = condition => (name, self, timeout) => V.it.skipIf(condition)(name, run(self), timeout);
  const only = (name, self, timeout) => V.it.only(name, run(self), timeout);
  const each = cases => (name, self, timeout) => V.it.each(cases)(name, run(self), timeout);
  return Object.assign(f, {
    skip,
    skipIf,
    only,
    each
  });
};
/** @internal */
const effect = exports.effect = /*#__PURE__*/makeTester( /*#__PURE__*/Effect.provide(TestEnv));
/** @internal */
const scoped = exports.scoped = /*#__PURE__*/makeTester( /*#__PURE__*/(0, _Function.flow)(Effect.scoped, /*#__PURE__*/Effect.provide(TestEnv)));
/** @internal */
const live = exports.live = /*#__PURE__*/makeTester(_Function.identity);
/** @internal */
const scopedLive = exports.scopedLive = /*#__PURE__*/makeTester(Effect.scoped);
/** @internal */
const flakyTest = (self, timeout = Duration.seconds(30)) => (0, _Function.pipe)(Effect.catchAllDefect(self, Effect.fail), Effect.retry((0, _Function.pipe)(Schedule.recurs(10), Schedule.compose(Schedule.elapsed), Schedule.whileOutput(Duration.lessThanOrEqualTo(timeout)))), Effect.orDie);
exports.flakyTest = flakyTest;
//# sourceMappingURL=internal.js.map