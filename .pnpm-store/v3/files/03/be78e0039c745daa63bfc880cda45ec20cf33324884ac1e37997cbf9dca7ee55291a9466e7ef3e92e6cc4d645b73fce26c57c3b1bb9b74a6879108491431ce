/**
 * @since 1.0.0
 */
import type * as Duration from "effect/Duration";
import type * as Effect from "effect/Effect";
import type * as Scope from "effect/Scope";
import type * as TestServices from "effect/TestServices";
import * as V from "vitest";
/**
 * @since 1.0.0
 */
export type API = V.TestAPI<{}>;
/**
 * @since 1.0.0
 */
export declare namespace Vitest {
    /**
     * @since 1.0.0
     */
    interface TestFunction<A, E, R, TestArgs extends Array<any>> {
        (...args: TestArgs): Effect.Effect<A, E, R>;
    }
    /**
     * @since 1.0.0
     */
    interface Test<R> {
        <A, E>(name: string, self: TestFunction<A, E, R, [V.TaskContext<V.Test<{}>> & V.TestContext]>, timeout?: number | V.TestOptions): void;
    }
    /**
     * @since 1.0.0
     */
    interface Tester<R> extends Vitest.Test<R> {
        skip: Vitest.Test<R>;
        skipIf: (condition: unknown) => Vitest.Test<R>;
        only: Vitest.Test<R>;
        each: <T>(cases: ReadonlyArray<T>) => <A, E>(name: string, self: TestFunction<A, E, R, Array<T>>, timeout?: number | V.TestOptions) => void;
    }
}
/**
 * @since 1.0.0
 */
export declare const addEqualityTesters: () => void;
/**
 * @since 1.0.0
 */
export declare const effect: Vitest.Tester<TestServices.TestServices>;
/**
 * @since 1.0.0
 */
export declare const scoped: Vitest.Tester<TestServices.TestServices | Scope.Scope>;
/**
 * @since 1.0.0
 */
export declare const live: Vitest.Tester<never>;
/**
 * @since 1.0.0
 */
export declare const scopedLive: Vitest.Tester<Scope.Scope>;
/**
 * @since 1.0.0
 */
export declare const flakyTest: <A, E, R>(self: Effect.Effect<A, E, R>, timeout?: Duration.DurationInput) => Effect.Effect<A, never, R>;
/** @ignored */
declare const methods: {
    readonly effect: Vitest.Tester<TestServices.TestServices>;
    readonly live: Vitest.Tester<never>;
    readonly flakyTest: <A, E, R>(self: Effect.Effect<A, E, R>, timeout?: Duration.DurationInput) => Effect.Effect<A, never, R>;
    readonly scoped: Vitest.Tester<TestServices.TestServices | Scope.Scope>;
    readonly scopedLive: Vitest.Tester<Scope.Scope>;
};
/**
 * @since 1.0.0
 */
export declare const it: API & typeof methods;
/**
 * @since 1.0.0
 */
export * from "vitest";
//# sourceMappingURL=index.d.ts.map