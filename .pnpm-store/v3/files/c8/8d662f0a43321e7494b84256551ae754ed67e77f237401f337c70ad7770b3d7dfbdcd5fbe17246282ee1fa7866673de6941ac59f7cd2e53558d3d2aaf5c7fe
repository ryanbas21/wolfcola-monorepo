"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  addEqualityTesters: true,
  effect: true,
  scoped: true,
  live: true,
  scopedLive: true,
  flakyTest: true,
  it: true
};
exports.scopedLive = exports.scoped = exports.live = exports.it = exports.flakyTest = exports.effect = exports.addEqualityTesters = void 0;
var V = _interopRequireWildcard(require("vitest"));
Object.keys(V).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === V[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return V[key];
    }
  });
});
var internal = _interopRequireWildcard(require("./internal.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @since 1.0.0
 */
const addEqualityTesters = exports.addEqualityTesters = internal.addEqualityTesters;
/**
 * @since 1.0.0
 */
const effect = exports.effect = internal.effect;
/**
 * @since 1.0.0
 */
const scoped = exports.scoped = internal.scoped;
/**
 * @since 1.0.0
 */
const live = exports.live = internal.live;
/**
 * @since 1.0.0
 */
const scopedLive = exports.scopedLive = internal.scopedLive;
/**
 * @since 1.0.0
 */
const flakyTest = exports.flakyTest = internal.flakyTest;
/** @ignored */
const methods = {
  effect,
  live,
  flakyTest,
  scoped,
  scopedLive
};
/**
 * @since 1.0.0
 */
const it = exports.it = /*#__PURE__*/Object.assign(V.it, methods);
/**
 * @since 1.0.0
 */
//# sourceMappingURL=index.js.map